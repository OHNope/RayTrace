switch (0) {
        case 1:
            world = random_scene();
            background = color(0.70, 0.80, 1.00);
            lookfrom = point3(13,2,3);
            lookat = point3(0,0,0);
            vfov = 20.0;
            aperture = 0.1;
            break;

        case 2:
            world = two_spheres();
            background = color(0.70, 0.80, 1.00);
            lookfrom = point3(13,2,3);
            lookat = point3(0,0,0);
            vfov = 20.0;
            break;

        case 3:
            world = two_perlin_spheres();
            background = color(0.70, 0.80, 1.00);
            lookfrom = point3(13,2,3);
            lookat = point3(0,0,0);
            vfov = 20.0;
            break;

        case 4:
            world = earth();
            background = color(0.70, 0.80, 1.00);
            lookfrom = point3(0,0,12);
            lookat = point3(0,0,0);
            vfov = 20.0;
            break;

        case 5:
            world = simple_light();
            samples_per_pixel = 400;
            lookfrom = point3(26,3,6);
            lookat = point3(0,2,0);
            vfov = 20.0;
            break;

        default:
        case 6:
            world = cornell_box();
            aspect_ratio = 1.0;
            image_width = 600;
            samples_per_pixel = 200;
            lookfrom = point3(278, 278, -800);
            lookat = point3(278, 278, 0);
            vfov = 40.0;
            break;

        case 7:
            world = cornell_smoke();
            aspect_ratio = 1.0;
            image_width = 600;
            samples_per_pixel = 200;
            lookfrom = point3(278, 278, -800);
            lookat = point3(278, 278, 0);
            vfov = 40.0;
            break;

        case 8:
            world = final_scene();
            aspect_ratio = 1.0;
            image_width = 800;
            samples_per_pixel = 10000;
            lookfrom = point3(478, 278, -600);
            lookat = point3(278, 278, 0);
            vfov = 40.0;
            break;
    }

/*
// TODO:List of scenes;
Construct_Infor_Scene_Camera<shared_ptr<hittable>> Scenes[]{
    Construct_Infor_Scene_Camera<shared_ptr<hittable>>(
        random_scene, point3(13, 2, 3), point3(0, 0, 0), color(0, 0, 0), 400,
        20.0, 1.0, 0.1, make_shared<Rect<XZ>>()),
    Construct_Infor_Scene_Camera<shared_ptr<hittable>>(
        two_perlin_spheres, point3(13, 2, 3), point3(0, 0, 0),
        color(0.70, 0.80, 1.00), 400, 20.0, 1.0, 0.0,
        make_shared<sphere>(vec3(0, 7, 0), 2, nullptr),
        make_shared<Rect<XY>>(3, 5, 1, 3, -2, nullptr))};
*/

 auto world = test_cornell_box();
    auto lights = make_shared<hittableList>();
    lights->add(
        make_shared<Rect<XZ>>(213, 343, 227, 332, 554, shared_ptr<material>()));
    lights->add(
        make_shared<sphere>(point3(190, 90, 190), 90, shared_ptr<material>()));
    const vec3 background(0, 0, 0);
    // Camera
    point3 lookfrom(278, 278, -800);
    point3 lookat(278, 278, 0);
    vec3 vup(0, 1, 0);
    auto dist_to_focus = 10.0;
    auto aperture = 0.0;
    auto vfov = 40.0;


constexpr const auto M_TAU(2 * M_PI);
inline float fast_cosc(float x) {
    x -= 0.25f + floorf(x + 0.25f);
    x *= 16.0f * (fabs(x) - 0.5f);
    x += 0.225f * x * (fabs(x) - 1.0f);
    return x;
}
inline float fast_sinf(float x) { return fast_cosc(x / M_TAU - 0.25f); }
inline float fast_cosf(float x) { return fast_cosc(x / M_TAU); }

constexpr inline int _BIT(int n) { return (1 << n); }
inline float fast_exp2(float x) {
    union {
        uint32_t i;
        float f;
    } v;
    float offset = (x < 0) ? 1.0f : 0.0f;
    float clipp = (x < -126) ? -126.0f : x;
    int w = clipp;
    float z = clipp - w + offset;
    v.i = (uint32_t)(_BIT(23) *
                     (clipp + 121.2740575f + 27.7280233f / (4.84252568f - z) -
                      1.49012907f * z));
    return v.f;
}
inline float fast_log2(float x) {
    union {
        float f;
        uint32_t i;
    } vx;
    union {
        uint32_t i;
        float f;
    } mx;
    vx.f = x;
    mx.i = (vx.i & 0x007FFFFF) | 0x3F000000;
    float y = vx.i;
    y *= 1.1920928955078125e-7f;
    return y - 124.22551499f - 1.498030302f * mx.f -
           1.72587999f / (0.3520887068f + mx.f);
}

constexpr inline long double operator"" _deg_to_rad(long double deg) {
    long double radians = deg * std::numbers::pi_v<long double> / 180;
    return radians;
}
constexpr inline long double operator"" _rad_to_deg(long double rad) {
    long double degrees = 180 * rad / std::numbers::pi_v<long double>;
    return degrees;
}

double InvSqrt(double number) {
    long long i;
    double x2, y;
    const double threehalfs = 1.5F;

    x2 = number * 0.5F;
    y = number;
    i = *(long long *)&y;
    i = 0x5fe6ec85e7de30da - (i >> 1);
    y = *(double *)&i;
    y = y * (threehalfs - (x2 * y * y)); // 1st iteration
    y = y * (threehalfs - (x2 * y * y)); // 2nd iteration, this can be removed
    return y;
}
float InvSqrt(float number) {
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y = number;
    i = *(long *)&y; // evil floating point bit level hacking
    i = 0x5f3759df - (i >> 1);
    y = *(float *)&i;
    y = y * (threehalfs - (x2 * y * y)); // 1st iteration
    y = y * (threehalfs - (x2 * y * y));
    return y;
}

inline float acosFast4(float inX) {
    float x1 = abs(inX);
    float x2 = x1 * x1;
    float x3 = x2 * x1;
    float s;

    s = -0.2121144f * x1 + 1.5707288f;
    s = 0.0742610f * x2 + s;
    s = -0.0187293f * x3 + s;
    s = sqrt(1.0f - x1) * s;

    return inX >= 0.0f ? s : 3.1415926535897932384626433f - s;
}
inline float asinFast4(float inX) {
    float x = inX;
    // asin is offset of acos
    return 1.5707963267948966192313217f - acosFast4(x);
}
inline float atanFast4(float inX) {
    float x = inX;
    return x * (-0.1784f * abs(x) - 0.0663f * x * x + 1.0301f);
}